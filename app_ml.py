# -*- coding: utf-8 -*-
"""app

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b1z5J_p7D1RCdIjCKlogaWVkqM8yDRQA
"""

import streamlit as st
import pandas as pd
import pickle

#Loading th saved model

customer_churn_model = pickle.load(open('customer_churn.sav', 'rb'))

st.title("Customer Churn Prediction using Machine Learning")

LocationList = ['Select Location',0,1]
DeviceClassType = ['Select Device Class', 0,1,2]
PaymentMethodType = ['Select Payment Method', 0,1,2,3]
GamesProductList = ['Select GamesProduct', 0,1,2]
MusicProductList = ["Select MusicProduct", 0,1,2]
EducationProductList = ['Select Education Product', 0,1,2]
VideoProductList = ['Select Video Product', 0,1,2]
UseMyAppList = ['Select UseMyApp', 0,1,2]
CallCenterList = ['Select CallCenter', 0, 1]

col1, col2 = st.columns(2)

with col1:
    TenureMonth = st.slider("TenureMonths ", min_value= 1, max_value= 1000, step=1, value= 30)
with col2:
    Location = st.selectbox("Location [ 0 = Bandung, 1 = Jakarta]", LocationList)
with col1:
    DeviceClass = st.selectbox("DeviceClassType [ 0 = HighEnd, 1 = LowEnd, 2 = MidEnd]", DeviceClassType)
with col2:
    MonthlyPurchases = st.slider("MonthlyPurchases-IDR ", min_value= 0, max_value= 10000000, step=1, value= 100000)
with col1:
    CLTV = st.slider("CLTV-IDR ", min_value= 0, max_value= 10000000, step=1, value= 100000)
with col2:
    PaymentMethod = st.selectbox('PaymentMethodType [ 0 = Credit, 1 = Debit, 2 = Digital Wallet, 3 = Pulsa ]', PaymentMethodType)
with col1:
    CallCenter = st.selectbox("CallCenter [ 0 = No, 1 = Yes]", CallCenterList)
with col2:
    GamesProduct = st.selectbox("GamesProductList [ 0 = No, 1 = No Internet Service, 2 = Yes]", GamesProductList)
with col1:
    EducationProduct = st.selectbox("EducationProductList [ 0 = No, 1 = No Internet Service, 2 = Yes]", EducationProductList)
with col2:
    MusicProduct = st.selectbox("MusicProductList [ 0 = No, 1 = No Internet Service, 2 = Yes]", MusicProductList)
with col1:
    VideoProduct = st.selectbox("VideoProductList [ 0 = No, 1 = No Internet Service, 2 = Yes]", VideoProductList)
with col1:
    UseMyApp = st.selectbox("UseMyAppList [ 0 = No, 1 = No Internet Service, 2 = Yes]", UseMyAppList)




# Age = st.slider('Age', min_value= 1, max_value= 110, step=1, value= 20)
# Sex = st.selectbox("Sex [ 0 = Male, 1 = Female ]", genderList)
# ChestPainType = st.selectbox("ChestPainType [ 0 = Asymptomatic, 1 = Non-Anginal Pain, 2 = Atypical Angina, 3 = Typical Angina, ]", ChestPainTypeList)
# RestingBP = st.slider("RestingBP ", min_value= 0, max_value= 200, step=1, value= 100)
# Cholesterol = st.slider("Cholesterol ", min_value= 0, max_value= 603, step=1, value= 200)
# FastingBS = st.selectbox('FastingBS [ 0 = otherwise, 1 = if FastingBS > 120 mg/dl ]', FastingBSList)
# RestingECG = st.selectbox('RestingECG [ 0 = Normal, 1 = showing probable, 2 = abnormality ,]', RestingECGList)
# MaxHR = st.slider('MaxHR', min_value= 60, max_value= 202, step=1, value= 100)
# ExerciseAngina = st.selectbox("ExerciseAngina [ 0 = No, 1 = Yes ]", ExerciseAnginaList)
# Oldpeak = st.slider("Oldpeak", min_value= -2.6, max_value= 6.2, step=0.01, value=0.0)
# ST_Slope = st.selectbox('ST_Slope [ 0 = flat, 1 = upsloping, 2 = downsloping,]', STSlopeList)


#code for prediction
customerchurn_predict = ''

#creating a button for prediction

if st.button('Check your result'):
    churn_predict = customer_churn_model.predict([
        [
            TenureMonth,
            Location,
            DeviceClass,
            MonthlyPurchases,
            CLTV,
            PaymentMethod,
            CallCenter,
            GamesProduct,
            EducationProduct,
            MusicProduct,
            UseMyApp,
        ]
        ])

    if (churn_predict[0] == 1):
        customerchurn_predict = 'A customer decides to churn'

    else:
        customerchurn_predict = 'A customer does not decide to churn'

st.success(customerchurn_predict)
